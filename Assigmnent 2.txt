!pip install pyaudio numpy PyQt5 keyboard
import sys          # System manipulation
import time         # Used to pause execution in threads as needed
import keyboard     # Register keyboard events (keypresses)
import threading    # Threads for parallel execution
import pyaudio      # Audio streams
import numpy as np  # Matrix/list manipulation
import audioop      # Getting volume from sound data

# import struct       # Used for converting sound data to integer lists
# For recording the sound into playable .wav files
# from scipy.fftpack import fft 
# import wave

# GUI dependencies
from PyQt5.QtWidgets import QApplication, QLabel, QWidget
from PyQt5.QtGui import * 

# Constants for streams, modify with care!
CHUNK = 1024*4
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100


print("Available audio devices:")
# Check the input devices
p = pyaudio.PyAudio()
info = p.get_host_api_info_by_index(0)
numdevices = info.get('deviceCount')
for i in range(0, numdevices):
        if (p.get_device_info_by_host_api_device_index(0, i).get('maxInputChannels')) > 0:
            print ("Input Device id ", i, " - ", p.get_device_info_by_host_api_device_index(0, i).get('name'))
p.terminate()


# Modified from:
# https://people.csail.mit.edu/hubert/pyaudio/

# This is the method running on a thread, one initialized for each audio device
def log_sound(index, label):
    global buffer       
    stream = p.open(
        format=FORMAT,           
        channels=CHANNELS,
        rate=RATE,
        input=True,
        frames_per_buffer=CHUNK,
        input_device_index=index
    )
    FAULTY_THRESHOLD = 100
    while True:
        data = stream.read(CHUNK)
        volume = audioop.rms(data, 2)
        buffer[index].append(volume)
        
        # Mise à jour de l'affichage dans l'interface utilisateur
        if volume < FAULTY_THRESHOLD:
            label.setText(str(index) + " : FAULTY")
        else:
            label.setText(str(index) + " : " + str(volume))

        # Gestion de la fin du programme
        if keyboard.is_pressed('q') or quit_flag:
            print("Closing stream", index)
            stream.stop_stream()
            stream.close()
            break

            
# Close threads when window is closed
def exitMethod():
    global quit_flag
    quit_flag = True
    
# This is the main thread, the code should be implemented here
def mainThread(mean_label, var_label):
    global buffer
    buffer_width = 100  
    
    while True:
        if keyboard.is_pressed('q') or quit_flag:
            for x in threads:
                x.join()
            p.terminate()
            break

        # Maintenir la largeur du buffer à buffer_width
        for i in range(len(buffer)):
            buffer[i] = buffer[i][-buffer_width:]
        
        # Calcul de la moyenne et de la variance combinées avec des vérifications pour éviter les erreurs
        combined_buffer = [item for sublist in buffer for item in sublist]
        mean_volume = np.mean(combined_buffer) if len(combined_buffer) > 0 else 0
        var_volume = np.var(combined_buffer) if len(combined_buffer) > 1 else 0

        mean_label.setText("Mean: " + str(mean_volume))
        var_label.setText("Variance: " + str(var_volume))

        # Calcul de la moyenne et de la variance pour chaque source sonore avec des vérifications pour éviter les erreurs
        for i, single_buffer in enumerate(buffer):
            mean_volume_single = np.mean(single_buffer) if len(single_buffer) > 0 else 0
            var_volume_single = np.var(single_buffer) if len(single_buffer) > 1 else 0
            
            print(f"Source {i}: Mean={mean_volume_single}, Variance={var_volume_single}")
            # Vous pouvez également ajouter ces informations à l'interface utilisateur si vous le souhaitez
        
        time.sleep(0.01)
    
    print("Execution finished")



# Store threads and labels
threads = []
labels = []
buffer = []
quit_flag = False

# GUI
app = QApplication(sys.argv)
app.aboutToQuit.connect(exitMethod)

# Initializing window
window = QWidget()
window.setWindowTitle('Soundwave log')
window.setGeometry(50, 50, 500, 500)
window.move(500, 500)

# Initialize pyaudio
p = pyaudio.PyAudio()
info = p.get_host_api_info_by_index(0)
numdevices = info.get('deviceCount')

# Run the threads
for i in range(0, numdevices):
    
        # Check if the device takes input
    if (p.get_device_info_by_host_api_device_index(0, i).get('maxInputChannels')) > 0:
            
            # Initialize labels
        labels.append(QLabel("____________", parent = window))
        labels[-1].move(60, (15 * (i+1)) + (10*i))
        labels[-1].setFont(QFont('Arial', 10))
        
            # Append a new buffer to the global list
        buffer.append([])
        
            # Start threads
        threads.append(threading.Thread(target=log_sound, args=(i, labels[i])))
        threads[i].start()

# Init. labels for combined data        
mean = QLabel("Mean: IMPLEMENT ME!", parent = window)
mean.move(60, (15 * numdevices + (10 * numdevices)))
mean.setFont(QFont('Arial', 12))

variance = QLabel("Variance: IMPLEMENT ME!", parent = window)
variance.move(60, (15 * numdevices + (13 * (numdevices + 2))))
variance.setFont(QFont('Arial', 12))

# Start the main thread
main_thread = threading.Thread(target = mainThread, args=[mean, variance])
main_thread.start()

# Show window
window.show()
# Run GUI-application loop
app.exec_()



# Implementation without threads